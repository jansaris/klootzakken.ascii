/* 
 * Klootzakken API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using Klootzakken.Api.Client;
using Klootzakken.Api.Model;

namespace Klootzakken.Api.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IGameApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Create a new lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>LobbyView</returns>
        LobbyView CreateLobby (string name, bool? isPublic = null);

        /// <summary>
        /// Create a new lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>ApiResponse of LobbyView</returns>
        ApiResponse<LobbyView> CreateLobbyWithHttpInfo (string name, bool? isPublic = null);
        /// <summary>
        /// Play on of your possible actions in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>GameView</returns>
        GameView GameAction (string gameId, PlayView play = null);

        /// <summary>
        /// Play on of your possible actions in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>ApiResponse of GameView</returns>
        ApiResponse<GameView> GameActionWithHttpInfo (string gameId, PlayView play = null);
        /// <summary>
        /// Retrieve the state of a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>GameView</returns>
        GameView GetGame (string gameId);

        /// <summary>
        /// Retrieve the state of a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>ApiResponse of GameView</returns>
        ApiResponse<GameView> GetGameWithHttpInfo (string gameId);
        /// <summary>
        /// Get the state of a particular lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>LobbyView</returns>
        LobbyView GetLobby (string lobbyId);

        /// <summary>
        /// Get the state of a particular lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>ApiResponse of LobbyView</returns>
        ApiResponse<LobbyView> GetLobbyWithHttpInfo (string lobbyId);
        /// <summary>
        /// Join a Lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>LobbyView</returns>
        LobbyView JoinLobby (string lobbyId);

        /// <summary>
        /// Join a Lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>ApiResponse of LobbyView</returns>
        ApiResponse<LobbyView> JoinLobbyWithHttpInfo (string lobbyId);
        /// <summary>
        /// Get all your and public lobbies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LobbyView&gt;</returns>
        List<LobbyView> ListLobbies ();

        /// <summary>
        /// Get all your and public lobbies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LobbyView&gt;</returns>
        ApiResponse<List<LobbyView>> ListLobbiesWithHttpInfo ();
        /// <summary>
        /// Return the games you participate in
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GameView&gt;</returns>
        List<GameView> ListMyGames ();

        /// <summary>
        /// Return the games you participate in
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GameView&gt;</returns>
        ApiResponse<List<GameView>> ListMyGamesWithHttpInfo ();
        /// <summary>
        /// Return the lobbies you&#39;ve created or joined
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LobbyView&gt;</returns>
        List<LobbyView> ListMyLobbies ();

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LobbyView&gt;</returns>
        ApiResponse<List<LobbyView>> ListMyLobbiesWithHttpInfo ();
        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>GameView</returns>
        GameView StartGame (string lobbyId);

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>ApiResponse of GameView</returns>
        ApiResponse<GameView> StartGameWithHttpInfo (string lobbyId);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// Create a new lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>Task of LobbyView</returns>
        System.Threading.Tasks.Task<LobbyView> CreateLobbyAsync (string name, bool? isPublic = null);

        /// <summary>
        /// Create a new lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        System.Threading.Tasks.Task<ApiResponse<LobbyView>> CreateLobbyAsyncWithHttpInfo (string name, bool? isPublic = null);
        /// <summary>
        /// Play on of your possible actions in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>Task of GameView</returns>
        System.Threading.Tasks.Task<GameView> GameActionAsync (string gameId, PlayView play = null);

        /// <summary>
        /// Play on of your possible actions in the game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameView>> GameActionAsyncWithHttpInfo (string gameId, PlayView play = null);
        /// <summary>
        /// Retrieve the state of a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Task of GameView</returns>
        System.Threading.Tasks.Task<GameView> GetGameAsync (string gameId);

        /// <summary>
        /// Retrieve the state of a game
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameView>> GetGameAsyncWithHttpInfo (string gameId);
        /// <summary>
        /// Get the state of a particular lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>Task of LobbyView</returns>
        System.Threading.Tasks.Task<LobbyView> GetLobbyAsync (string lobbyId);

        /// <summary>
        /// Get the state of a particular lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        System.Threading.Tasks.Task<ApiResponse<LobbyView>> GetLobbyAsyncWithHttpInfo (string lobbyId);
        /// <summary>
        /// Join a Lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>Task of LobbyView</returns>
        System.Threading.Tasks.Task<LobbyView> JoinLobbyAsync (string lobbyId);

        /// <summary>
        /// Join a Lobby
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        System.Threading.Tasks.Task<ApiResponse<LobbyView>> JoinLobbyAsyncWithHttpInfo (string lobbyId);
        /// <summary>
        /// Get all your and public lobbies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LobbyView&gt;</returns>
        System.Threading.Tasks.Task<List<LobbyView>> ListLobbiesAsync ();

        /// <summary>
        /// Get all your and public lobbies
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LobbyView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LobbyView>>> ListLobbiesAsyncWithHttpInfo ();
        /// <summary>
        /// Return the games you participate in
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GameView&gt;</returns>
        System.Threading.Tasks.Task<List<GameView>> ListMyGamesAsync ();

        /// <summary>
        /// Return the games you participate in
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GameView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<GameView>>> ListMyGamesAsyncWithHttpInfo ();
        /// <summary>
        /// Return the lobbies you&#39;ve created or joined
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LobbyView&gt;</returns>
        System.Threading.Tasks.Task<List<LobbyView>> ListMyLobbiesAsync ();

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LobbyView&gt;)</returns>
        System.Threading.Tasks.Task<ApiResponse<List<LobbyView>>> ListMyLobbiesAsyncWithHttpInfo ();
        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>Task of GameView</returns>
        System.Threading.Tasks.Task<GameView> StartGameAsync (string lobbyId);

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        System.Threading.Tasks.Task<ApiResponse<GameView>> StartGameAsyncWithHttpInfo (string lobbyId);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class GameApi : IGameApi
    {
        private Klootzakken.Api.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class.
        /// </summary>
        /// <returns></returns>
        public GameApi(String basePath)
        {
            this.Configuration = new Configuration(new ApiClient(basePath));

            ExceptionFactory = Klootzakken.Api.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="GameApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public GameApi(Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                this.Configuration = Configuration.Default;
            else
                this.Configuration = configuration;

            ExceptionFactory = Klootzakken.Api.Client.Configuration.DefaultExceptionFactory;

            // ensure API client has configuration ready
            if (Configuration.ApiClient.Configuration == null)
            {
                this.Configuration.ApiClient.Configuration = this.Configuration;
            }
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public String GetBasePath()
        {
            return this.Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(String basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Klootzakken.Api.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public Dictionary<String, String> DefaultHeader()
        {
            return this.Configuration.DefaultHeader;
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            this.Configuration.AddDefaultHeader(key, value);
        }

        /// <summary>
        /// Create a new lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>LobbyView</returns>
        public LobbyView CreateLobby (string name, bool? isPublic = null)
        {
             ApiResponse<LobbyView> localVarResponse = CreateLobbyWithHttpInfo(name, isPublic);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Create a new lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>ApiResponse of LobbyView</returns>
        public ApiResponse< LobbyView > CreateLobbyWithHttpInfo (string name, bool? isPublic = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GameApi->CreateLobby");

            var localVarPath = "/lobby/create/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (isPublic != null && isPublic.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(isPublic); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isPublic; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Create a new lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>Task of LobbyView</returns>
        public async System.Threading.Tasks.Task<LobbyView> CreateLobbyAsync (string name, bool? isPublic = null)
        {
             ApiResponse<LobbyView> localVarResponse = await CreateLobbyAsyncWithHttpInfo(name, isPublic);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Create a new lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="name">The name of the future game</param>
        /// <param name="isPublic">Indicates whether the lobby is visible to everyone (optional)</param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LobbyView>> CreateLobbyAsyncWithHttpInfo (string name, bool? isPublic = null)
        {
            // verify the required parameter 'name' is set
            if (name == null)
                throw new ApiException(400, "Missing required parameter 'name' when calling GameApi->CreateLobby");

            var localVarPath = "/lobby/create/{name}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (name != null) localVarPathParams.Add("name", Configuration.ApiClient.ParameterToString(name)); // path parameter
            if (isPublic != null && isPublic.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(isPublic); // http body (model) parameter
            }
            else
            {
                localVarPostBody = isPublic; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CreateLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Play on of your possible actions in the game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>GameView</returns>
        public GameView GameAction (string gameId, PlayView play = null)
        {
             ApiResponse<GameView> localVarResponse = GameActionWithHttpInfo(gameId, play);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Play on of your possible actions in the game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>ApiResponse of GameView</returns>
        public ApiResponse< GameView > GameActionWithHttpInfo (string gameId, PlayView play = null)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GameAction");

            var localVarPath = "/game/{gameId}/play";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

        /// <summary>
        /// Play on of your possible actions in the game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>Task of GameView</returns>
        public async System.Threading.Tasks.Task<GameView> GameActionAsync (string gameId, PlayView play = null)
        {
             ApiResponse<GameView> localVarResponse = await GameActionAsyncWithHttpInfo(gameId, play);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Play on of your possible actions in the game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <param name="play">The details of your action - must be one of the possiblePlays from the game state (optional)</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameView>> GameActionAsyncWithHttpInfo (string gameId, PlayView play = null)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GameAction");

            var localVarPath = "/game/{gameId}/play";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
                "application/json", 
                "text/json", 
                "application/json-patch+json"
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter
            if (play != null && play.GetType() != typeof(byte[]))
            {
                localVarPostBody = Configuration.ApiClient.Serialize(play); // http body (model) parameter
            }
            else
            {
                localVarPostBody = play; // byte array
            }


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GameAction", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

        /// <summary>
        /// Retrieve the state of a game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>GameView</returns>
        public GameView GetGame (string gameId)
        {
             ApiResponse<GameView> localVarResponse = GetGameWithHttpInfo(gameId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Retrieve the state of a game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>ApiResponse of GameView</returns>
        public ApiResponse< GameView > GetGameWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGame");

            var localVarPath = "/game/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

        /// <summary>
        /// Retrieve the state of a game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Task of GameView</returns>
        public async System.Threading.Tasks.Task<GameView> GetGameAsync (string gameId)
        {
             ApiResponse<GameView> localVarResponse = await GetGameAsyncWithHttpInfo(gameId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Retrieve the state of a game 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="gameId">Id of the game</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameView>> GetGameAsyncWithHttpInfo (string gameId)
        {
            // verify the required parameter 'gameId' is set
            if (gameId == null)
                throw new ApiException(400, "Missing required parameter 'gameId' when calling GameApi->GetGame");

            var localVarPath = "/game/{gameId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (gameId != null) localVarPathParams.Add("gameId", Configuration.ApiClient.ParameterToString(gameId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

        /// <summary>
        /// Get the state of a particular lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>LobbyView</returns>
        public LobbyView GetLobby (string lobbyId)
        {
             ApiResponse<LobbyView> localVarResponse = GetLobbyWithHttpInfo(lobbyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get the state of a particular lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>ApiResponse of LobbyView</returns>
        public ApiResponse< LobbyView > GetLobbyWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->GetLobby");

            var localVarPath = "/lobby/{lobbyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Get the state of a particular lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>Task of LobbyView</returns>
        public async System.Threading.Tasks.Task<LobbyView> GetLobbyAsync (string lobbyId)
        {
             ApiResponse<LobbyView> localVarResponse = await GetLobbyAsyncWithHttpInfo(lobbyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get the state of a particular lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId"></param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LobbyView>> GetLobbyAsyncWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->GetLobby");

            var localVarPath = "/lobby/{lobbyId}";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("GetLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Join a Lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>LobbyView</returns>
        public LobbyView JoinLobby (string lobbyId)
        {
             ApiResponse<LobbyView> localVarResponse = JoinLobbyWithHttpInfo(lobbyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Join a Lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>ApiResponse of LobbyView</returns>
        public ApiResponse< LobbyView > JoinLobbyWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->JoinLobby");

            var localVarPath = "/lobby/{lobbyId}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Join a Lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>Task of LobbyView</returns>
        public async System.Threading.Tasks.Task<LobbyView> JoinLobbyAsync (string lobbyId)
        {
             ApiResponse<LobbyView> localVarResponse = await JoinLobbyAsyncWithHttpInfo(lobbyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Join a Lobby 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby to join</param>
        /// <returns>Task of ApiResponse (LobbyView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<LobbyView>> JoinLobbyAsyncWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->JoinLobby");

            var localVarPath = "/lobby/{lobbyId}/join";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("JoinLobby", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<LobbyView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (LobbyView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(LobbyView)));
            
        }

        /// <summary>
        /// Get all your and public lobbies 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LobbyView&gt;</returns>
        public List<LobbyView> ListLobbies ()
        {
             ApiResponse<List<LobbyView>> localVarResponse = ListLobbiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Get all your and public lobbies 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LobbyView&gt;</returns>
        public ApiResponse< List<LobbyView> > ListLobbiesWithHttpInfo ()
        {

            var localVarPath = "/lobbies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLobbies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LobbyView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LobbyView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LobbyView>)));
            
        }

        /// <summary>
        /// Get all your and public lobbies 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LobbyView&gt;</returns>
        public async System.Threading.Tasks.Task<List<LobbyView>> ListLobbiesAsync ()
        {
             ApiResponse<List<LobbyView>> localVarResponse = await ListLobbiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Get all your and public lobbies 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LobbyView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LobbyView>>> ListLobbiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/lobbies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListLobbies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LobbyView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LobbyView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LobbyView>)));
            
        }

        /// <summary>
        /// Return the games you participate in 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;GameView&gt;</returns>
        public List<GameView> ListMyGames ()
        {
             ApiResponse<List<GameView>> localVarResponse = ListMyGamesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the games you participate in 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;GameView&gt;</returns>
        public ApiResponse< List<GameView> > ListMyGamesWithHttpInfo ()
        {

            var localVarPath = "/myGames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GameView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GameView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameView>)));
            
        }

        /// <summary>
        /// Return the games you participate in 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;GameView&gt;</returns>
        public async System.Threading.Tasks.Task<List<GameView>> ListMyGamesAsync ()
        {
             ApiResponse<List<GameView>> localVarResponse = await ListMyGamesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the games you participate in 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;GameView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<GameView>>> ListMyGamesAsyncWithHttpInfo ()
        {

            var localVarPath = "/myGames";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyGames", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<GameView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<GameView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<GameView>)));
            
        }

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>List&lt;LobbyView&gt;</returns>
        public List<LobbyView> ListMyLobbies ()
        {
             ApiResponse<List<LobbyView>> localVarResponse = ListMyLobbiesWithHttpInfo();
             return localVarResponse.Data;
        }

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of List&lt;LobbyView&gt;</returns>
        public ApiResponse< List<LobbyView> > ListMyLobbiesWithHttpInfo ()
        {

            var localVarPath = "/myLobbies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyLobbies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LobbyView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LobbyView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LobbyView>)));
            
        }

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of List&lt;LobbyView&gt;</returns>
        public async System.Threading.Tasks.Task<List<LobbyView>> ListMyLobbiesAsync ()
        {
             ApiResponse<List<LobbyView>> localVarResponse = await ListMyLobbiesAsyncWithHttpInfo();
             return localVarResponse.Data;

        }

        /// <summary>
        /// Return the lobbies you&#39;ve created or joined 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (List&lt;LobbyView&gt;)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<List<LobbyView>>> ListMyLobbiesAsyncWithHttpInfo ()
        {

            var localVarPath = "/myLobbies";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("ListMyLobbies", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<List<LobbyView>>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (List<LobbyView>) Configuration.ApiClient.Deserialize(localVarResponse, typeof(List<LobbyView>)));
            
        }

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game. 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>GameView</returns>
        public GameView StartGame (string lobbyId)
        {
             ApiResponse<GameView> localVarResponse = StartGameWithHttpInfo(lobbyId);
             return localVarResponse.Data;
        }

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game. 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>ApiResponse of GameView</returns>
        public ApiResponse< GameView > StartGameWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->StartGame");

            var localVarPath = "/lobby/{lobbyId}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game. 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>Task of GameView</returns>
        public async System.Threading.Tasks.Task<GameView> StartGameAsync (string lobbyId)
        {
             ApiResponse<GameView> localVarResponse = await StartGameAsyncWithHttpInfo(lobbyId);
             return localVarResponse.Data;

        }

        /// <summary>
        /// Start the game for a lobby. The lobby will be converted to a game. 
        /// </summary>
        /// <exception cref="Klootzakken.Api.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="lobbyId">Id of the lobby</param>
        /// <returns>Task of ApiResponse (GameView)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<GameView>> StartGameAsyncWithHttpInfo (string lobbyId)
        {
            // verify the required parameter 'lobbyId' is set
            if (lobbyId == null)
                throw new ApiException(400, "Missing required parameter 'lobbyId' when calling GameApi->StartGame");

            var localVarPath = "/lobby/{lobbyId}/start";
            var localVarPathParams = new Dictionary<String, String>();
            var localVarQueryParams = new Dictionary<String, String>();
            var localVarHeaderParams = new Dictionary<String, String>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<String, String>();
            var localVarFileParams = new Dictionary<String, FileParameter>();
            Object localVarPostBody = null;

            // to determine the Content-Type header
            String[] localVarHttpContentTypes = new String[] {
            };
            String localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            String[] localVarHttpHeaderAccepts = new String[] {
                "text/plain", 
                "application/json", 
                "text/json"
            };
            String localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            // set "format" to json by default
            // e.g. /pet/{petId}.{format} becomes /pet/{petId}.json
            localVarPathParams.Add("format", "json");
            if (lobbyId != null) localVarPathParams.Add("lobbyId", Configuration.ApiClient.ParameterToString(lobbyId)); // path parameter


            // make the HTTP request
            IRestResponse localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.POST, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("StartGame", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<GameView>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (GameView) Configuration.ApiClient.Deserialize(localVarResponse, typeof(GameView)));
            
        }

    }
}
